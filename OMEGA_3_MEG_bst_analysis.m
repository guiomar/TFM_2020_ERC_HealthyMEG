%% OMEGA: Script for automatic preprocessing
% 
% 1) Import MEG recordings (resting state)
% 2) Compute sources
% 3) PSD on sensors (in all freqs 
% 4) PSD on sensors (in bands)
% 5) PSD on sources (in bands)
%
% Guiomar Niso, 6 Apr 2015 (v2)
% Guiomar Niso, 6 May 2015 (v1)

clc; clear;

%% ==== PARAMETERS ========================================================

BSTdir = '/home/bic/guiomar/Desktop/Link_to_guiomar/brainstorm_db/OMEGA_guio_test2/data/';

% 1) MEG datasets storage
% mydirMEG = '/media/OMEGA/MEG/MEG_final_uploaded/to_do/';
% 2) Dir to save progress report
myFolder = '/media/OMEGA/OMEGA_bst/guio_test2/BST_preprocess/';
ReportName = 'OMEGA_report_analysis.txt';

% Subject name from filename (eg.'MNI0012_124340')
n = 1:14;

freq_bands = {'delta', '2, 4', 'mean'; 'theta', '5, 7', 'mean'; 'alpha', '8, 12', 'mean'; 'beta', '15, 29', 'mean'; 'gamma1', '30, 59', 'mean'; 'gamma2', '60, 90', 'mean'};

% -------------------------------------------------------------------------

sSubjects = bst_get('ProtocolSubjects');
% SubjectNames = {sSubjects.Subject.Name};
SubjectNames = {'MNI0001_981954','MNI0011_211215','MNI0014_719634','MNI0015_265922','MNI0026_390845',...
    'MNI0029_494738','MNI0030_854452','MNI0031_339964','MNI0033_386068','MNI0035_548027','MNI0037_704718',...
    'MNI0040_559176','MNI0048_245518','MNI0049_756575','MNI0050_431088'};

% -------------------------------------------------------------------------

segmentLength = 4; % seconds (blocks in resting state)

% Window length and overlap for PSD Welch method
win_length = 2; % sec
win_overlap = 50; % percentage


% =========================================================================
%% Prepare MEG files

% Global report text file
fileID = fopen([myFolder,ReportName],'a');
fprintf(fileID,'Start: %s \n',datestr(datetime('now')));
fclose(fileID);


for iSubject = 1:numel(SubjectNames)

try
    
%%%%% VISIT!!!!!!!
   
%% 0) SELECT RECORDINGS

% For Brainstorm
sFiles0 = [];
% Start a new report
bst_report('Start', sFiles0);

% Process: Select file names with tag: SUBJECT NAME
sFilesMEG = bst_process('CallProcess', 'process_select_files_data', ...
    sFiles0, [], ...
    'tag', SubjectNames{iSubject}, ...
    'subjectname', SubjectNames{iSubject}, ...
    'condition', '');

% Process: Select file names with tag: bandpass
sFilesMEG = bst_process('CallProcess', 'process_select_tag', ...
    sFilesMEG, [], ...
    'tag', 'bandpass', ...
    'search', 1, ...
    'select', 1);  % Select only the files with the tag

% ==== SELECT RESTING AND NOISE ====

% Process: Select file names with tag: resting
sFilesRESTING = bst_process('CallProcess', 'process_select_tag', ...
    sFilesMEG, [], ...
    'tag', 'resting', ...
    'search', 1, ...
    'select', 1);  % Select only the files with the tag

% Process: Select file names with tag: noise
sFilesNOISE = bst_process('CallProcess', 'process_select_tag', ...
    sFilesMEG, [], ...
    'tag', 'noise', ...
    'search', 1, ...
    'select', 1);  % Select only the files with the tag


%% ==== 1) Import MEG recordings (resting state) ==========================

% Process: Import MEG/EEG: Time
sFilesRimp = bst_process('CallProcess', 'process_import_data_time', ...
    sFilesRESTING, [], ...
    'subjectname', SubjectNames{iSubject}, ...
    'condition', '', ...
    'timewindow', [], ...
    'split', segmentLength, ...
    'usectfcomp', 1, ...
    'usessp', 1, ...
    'freq', [], ...
    'baseline', []);

% Process: Remove DC offset: NO NEED SINCE IT'S HIGH PASS FILTERED
% sFilesRimp = bst_process('CallProcess', 'process_baseline', ...
%     sFilesRimp, [], ...
%     'baseline', [], ...
%     'sensortypes', 'MEG,EEG', ...
%     'overwrite', 1);



%% ==== 2) Compute sources ================================================
for iN =1:numel(sFilesNOISE)
    
% Process: Compute noise covariance
sFilesNcov = bst_process('CallProcess', 'process_noisecov', ...
    sFilesNOISE(iN), [], ...
    'baseline', [], ... % All file
    'target', 1, ...
    'dcoffset', 1, ...  % Block by block, to avoid effects of slow shifts in data
    'method', 1, ...  % Full noise covariance matrix
    'copycond', 0, ... 
    'copysubj', 0);

% ** ONLY copy 'noisecov_full.mat' to directories with same date **********

NoiseCovFileAll = strsplit(sFilesNcov.FileName,'/');
NoiseCovFile = [BSTdir,NoiseCovFileAll{1},'/',NoiseCovFileAll{2},'/noisecov_full.mat'];
Date = strsplit(NoiseCovFileAll{2},'_');
Date = Date{4};

[folders,ifolder] = unique({sFilesRimp.Condition});

for ifol=1:numel(folders)
    if ~isempty( cell2mat(regexp(folders(ifol),Date, 'once')) ),
        db_set_noisecov(sFilesNcov.iStudy, sFilesRimp(ifolder(ifol)).iStudy, 0, 1); % Replace file not asking
    end
end

% *************************************************************************

% Process: Snapshot: Noise covariance
bst_process('CallProcess', 'process_snapshot', ...
    sFilesNcov, [], ...
    'target', 3, ...  % Noise covariance
    'modality', 1, ...  % MEG (All)
    'orient', 1, ...  % left
    'time', 0, ...
    'contact_time', [0, 0.1], ...
    'contact_nimage', 12, ...
    'threshold', 30, ...
    'comment', '');

end

% Process: Compute head model 
% Overlapping spheres 
sFilesHM = bst_process('CallProcess', 'process_headmodel', ...
    sFilesRimp, [], ...
    'comment', '', ...
    'sourcespace', 1, ...
    'meg', 3, ...  % Overlapping spheres
    'eeg', 1, ...  % 
    'ecog', 1, ...  % 
    'seeg', 1, ...
    'openmeeg', struct(...
         'BemFiles', {{}}, ...
         'BemNames', {{'Scalp', 'Skull', 'Brain'}}, ...
         'BemCond', [1, 0.0125, 1], ...
         'BemSelect', [1, 1, 1], ...
         'isAdjoint', 0, ...
         'isAdaptative', 1, ...
         'isSplit', 0, ...
         'SplitLength', 4000));

     
% Process: Compute sources *********************************** BEST??!
sFilesSRC = bst_process('CallProcess', 'process_inverse', ...
    sFilesRimp, [], ...
    'comment', '', ...
    'method', 2, ...  % dSPM
    'wmne', struct(...
         'NoiseCov', [], ...
         'InverseMethod', 'wmne', ...
         'ChannelTypes', {{}}, ...
         'SNR', 3, ...
         'diagnoise', 0, ...
         'SourceOrient', {{'free'}}, ...
         'loose', 0.2, ...
         'depth', 1, ...
         'weightexp', 0.5, ...
         'weightlimit', 10, ...
         'regnoise', 1, ...
         'magreg', 0.1, ...
         'gradreg', 0.1, ...
         'eegreg', 0.1, ...
         'ecogreg', 0.1, ...
         'seegreg', 0.1, ...
         'fMRI', [], ...
         'fMRIthresh', [], ...
         'fMRIoff', 0.1, ...
         'pca', 1), ...
    'sensortypes', 'MEG', ...
    'output', 1);  % Kernel only: shared



%% ==== 3) PSD on sensors (in all freqs) ==================================

% Process: Power spectrum density (Welch)
sFilesPSD_sens_all = bst_process('CallProcess', 'process_psd', ...
    sFilesRimp, [], ...
    'timewindow', [], ...
    'win_length', win_length, ...
    'win_overlap', win_overlap, ...
    'sensortypes', 'MEG, EEG', ...
    'edit', struct(...
         'Comment', 'Avg,Power', ...
         'TimeBands', [], ...
         'Freqs', [], ...
         'ClusterFuncTime', 'none', ...
         'Measure', 'power', ...
         'Output', 'all', ...
         'SaveKernel', 0));

% Process: Spectral flattening
sFilesPSD_sens_all_norm = bst_process('CallProcess', 'process_tf_norm', ...
    sFilesPSD_sens_all, [], ...
    'normalize', 2, ...  % Relative power (divide by total power)
    'overwrite', 0);

% ==== AVERAGE ====

% Process: Average: By trial group (condition average)
sFilesPSD_sens_all_av = bst_process('CallProcess', 'process_average', ...
    sFilesPSD_sens_all, [], ...
    'avgtype', 5, ...
    'avg_func', 6, ...  % Arithmetic average + Standard deviation
    'keepevents', 0);

% Process: Average: By trial group (condition average)
sFilesPSD_sens_all_norm_av = bst_process('CallProcess', 'process_average', ...
    sFilesPSD_sens_all_norm, [], ...
    'avgtype', 5, ...
    'avg_func', 6, ...  % Arithmetic average + Standard deviation
    'keepevents', 0);

% ==== TAGS ====

% Process: Add tag: sensor_all
sFilesPSD_sens_all_av = bst_process('CallProcess', 'process_add_tag', ...
    sFilesPSD_sens_all_av, [], ...
    'tag', 'sensor_all_total', ...
    'output', 1);  % Add to comment

% Process: Add tag: sensor_all_norm
sFilesPSD_sens_all_norm_av = bst_process('CallProcess', 'process_add_tag', ...
    sFilesPSD_sens_all_norm_av, [], ...
    'tag', 'sensor_all_norm', ...
    'output', 1);  % Add to comment

% ==== DELETE ====

% Process: Delete data files
bst_process('CallProcess', 'process_delete', ...
    sFilesPSD_sens_all, [], ...
    'target', 1);  % Delete data files

% Process: Delete data files
bst_process('CallProcess', 'process_delete', ...
    sFilesPSD_sens_all_norm, [], ...
    'target', 1);  % Delete data files


%% ==== 4) PSD on sensors (in bands) ======================================

% Process: Power spectrum density (Welch)
sFilesPSD_sens_bands = bst_process('CallProcess', 'process_psd', ...
    sFilesRimp, [], ...
    'timewindow', [], ...
    'win_length', win_length, ...
    'win_overlap', win_overlap, ...
    'sensortypes', 'MEG, EEG', ...
    'edit', struct(...
         'Comment', 'Avg,Power,FreqBands', ...
         'TimeBands', [], ...
         'Freqs', {freq_bands}, ...
         'ClusterFuncTime', 'none', ...
         'Measure', 'power', ...
         'Output', 'all', ...
         'SaveKernel', 0));

% Process: Spectral flattening
sFilesPSD_sens_bands_norm = bst_process('CallProcess', 'process_tf_norm', ...
    sFilesPSD_sens_bands, [], ...
    'normalize', 2, ...  % Relative power (divide by total power)
    'overwrite', 0);

% Process: Average: By trial group (condition average)
sFilesPSD_sens_bands_av = bst_process('CallProcess', 'process_average', ...
    sFilesPSD_sens_bands, [], ...
    'avgtype', 5, ...
    'avg_func', 6, ...  % Arithmetic average + Standard deviation
    'keepevents', 0);

% Process: Average: By trial group (condition average)
sFilesPSD_sens_bands_norm_av = bst_process('CallProcess', 'process_average', ...
    sFilesPSD_sens_bands_norm, [], ...
    'avgtype', 5, ...
    'avg_func', 6, ...  % Arithmetic average + Standard deviation
    'keepevents', 0);


% ==== TAGS ====

% Process: Add tag: sensor_bands
sFilesPSD_sens_bands_av = bst_process('CallProcess', 'process_add_tag', ...
    sFilesPSD_sens_bands_av, [], ...
    'tag', 'sensor_bands_total', ...
    'output', 1);  % Add to comment

% Process: Add tag: sensor_bands_norm
sFilesPSD_sens_bands_norm_av = bst_process('CallProcess', 'process_add_tag', ...
    sFilesPSD_sens_bands_norm_av, [], ...
    'tag', 'sensor_bands_norm', ...
    'output', 1);  % Add to comment

% ==== DELETE ====

% Process: Delete data files
bst_process('CallProcess', 'process_delete', ...
    sFilesPSD_sens_bands, [], ...
    'target', 1);  % Delete data files

% Process: Delete data files
bst_process('CallProcess', 'process_delete', ...
    sFilesPSD_sens_bands_norm, [], ...
    'target', 1);  % Delete data files


%% ==== 5) PSD on sources (in bands) ======================================

% Process: Power spectrum density (Welch)
sFilesPSD_source_bands = bst_process('CallProcess', 'process_psd', ...
    sFilesSRC, [], ...
    'timewindow', [], ...
    'win_length', win_length, ...
    'win_overlap', win_overlap, ...
    'clusters', [], ...
    'scoutfunc', 1, ...
    'edit', struct(...
         'Comment', 'Avg,Power,FreqBands', ...
         'TimeBands', [], ...
         'Freqs', {freq_bands}, ...
         'ClusterFuncTime', 'none', ...
         'Measure', 'power', ...
         'Output', 'all', ...
         'SaveKernel', 0));

% Process: Spectral flattening
sFilesPSD_source_bands_norm = bst_process('CallProcess', 'process_tf_norm', ...
    sFilesPSD_source_bands, [], ...
    'normalize', 2, ...  % Relative power (divide by total power)
    'overwrite', 0);

% Process: Average: By trial group (condition average)
sFilesPSD_source_bands_av = bst_process('CallProcess', 'process_average', ...
    sFilesPSD_source_bands, [], ...
    'avgtype', 5, ...
    'avg_func', 6, ...  % Arithmetic average + Standard deviation
    'keepevents', 0);

% Process: Average: By trial group (condition average)
sFilesPSD_source_bands_norm_av = bst_process('CallProcess', 'process_average', ...
    sFilesPSD_source_bands_norm, [], ...
    'avgtype', 5, ...
    'avg_func', 6, ...  % Arithmetic average + Standard deviation
    'keepevents', 0);


% ==== TAGS ====

% Process: Add tag: sources_bands
sFilesPSD_source_bands_av = bst_process('CallProcess', 'process_add_tag', ...
    sFilesPSD_source_bands_av, [], ...
    'tag', 'sources_bands_total', ...
    'output', 1);  % Add to comment

% Process: Add tag: sources_bands_norm
sFilesPSD_source_bands_norm_av = bst_process('CallProcess', 'process_add_tag', ...
    sFilesPSD_source_bands_norm_av, [], ...
    'tag', 'sources_bands_norm', ...
    'output', 1);  % Add to comment


% ==== DELETE ====

% Process: Delete data files
bst_process('CallProcess', 'process_delete', ...
    sFilesPSD_source_bands, [], ...
    'target', 1);  % Delete data files

% Process: Delete data files
bst_process('CallProcess', 'process_delete', ...
    sFilesPSD_source_bands_norm, [], ...
    'target', 1);  % Delete data files

%% ==== 6) PSD on scouts (in bands) =======================================

% MORE EFFICIENT WITH SCRIPT 

%% END

% Save and display report
ReportFile = bst_report('Save', sFiles0);
bst_report('Open', ReportFile);

% Create subject and report folder if they don't exist
mySubjectFolder = [myFolder,listfolders(iVisit).name(1:18),'/'];
myReportFolder  = [mySubjectFolder,listfolders(iVisit).name(1:18),'_report_analysis/'];

if ~isdir(mySubjectFolder)
    mkdir(mySubjectFolder);
end

if ~isdir(myReportFolder)
    mkdir(myReportFolder);
end

% SAVE REPORT
create_html_report(ReportFile,1,myReportFolder);

% Write global report
fileID = fopen([myFolder,ReportName],'a');
fprintf(fileID,'Good files: %s \n',SubjectNames{iSubject});
fclose(fileID);


catch
    fileID = fopen([myFolder,ReportName],'a');
    fprintf(fileID,'** Error in files: %s \n', SubjectNames{iSubject});
    fclose(fileID);
end
end





